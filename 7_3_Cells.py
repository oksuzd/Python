"""
3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).

В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
+ Сложение. Объединение двух клеток.
При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
- Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если
разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
* Умножение. Создается общая клетка из двух.
Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
| Деление. Создается общая клетка из двух.
Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****...,
где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""


class Cell:
    def __init__(self, sells_number):
        self.sells_number = sells_number

    def create_cell(self, number):
        return "*" * number

    def __str__(self):
        return self.create_cell(self.sells_number)

    def __add__(self, other_sell):
        return self.create_cell(self.sells_number + other_sell.sells_number)

    def __sub__(self, other_sell):
        differ = abs(self.sells_number - other_sell.sells_number)
        return self.create_cell(differ) if differ != 0 else 'Клетки равны.'

    def __mul__(self, other_sell):
        return self.create_cell(self.sells_number * other_sell.sells_number)

    def __truediv__(self, other_sell):
        return self.create_cell(max(self.sells_number, other_sell.sells_number) // min(self.sells_number, other_sell.sells_number))

    def make_order(self, n):
        order = divmod(self.sells_number, n)
        return "".join(map(str, [("*" * n + "\n") for i in range(order[0])])) + "*" * order[1]


sell_1 = Cell(3)
sell_2 = Cell(7)

print("Клетка 1:", sell_1)
print("Клетка 2:", sell_2)
print("Сумма клеток:", sell_1 + sell_2)
print("Разность клеток:", sell_1 - sell_2)
print("Произведение клеток:", sell_1 * sell_2)
print("Деление клеток:", sell_1 / sell_2)
print("Клетка по рядам:")
print(sell_2.make_order(3))
